<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace Seufert\Hamle\Grammar;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("Seufert\Hamle\Grammar\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("Seufert\Hamle\Grammar\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("Seufert\Hamle\Grammar\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("Seufert\Hamle\Grammar\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class Parser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;

    private function peg_f0($i) { $return = array();
                                      array_walk_recursive($i, function($a) use (&$return) { $return[] = $a; });
                                      return $return;
                            }
    private function peg_f1($i) { $return = array();
                                                  array_walk_recursive($i, function($a) use (&$return) { $return[] = $a; });
                                                  return $return;
                                         }
    private function peg_f2($text) { return new \Seufert\Hamle\TextNode\StringLit(join('',$text)); }
    private function peg_f3($body) { return $body; }
    private function peg_f4($name) {
            return new \Seufert\Hamle\TextNode\ScopeId(null, null, new \Seufert\Hamle\TextNode\ModelParam($name)); }
    private function peg_f5($expr, $chain) { if(!$chain) return $expr;
                           $top = array_pop($chain);
                           while($chain) { $top = array_pop($chain)->withChain($top); } return $expr->withChain($top); }
    private function peg_f6($sub) { return $sub; }
    private function peg_f7($filter) { return $filter; }
    private function peg_f8($name) { return new \Seufert\Hamle\TextNode\ModelParam($name, null); }
    private function peg_f9($query) { return $query; }
    private function peg_f10($id) { return new \Seufert\Hamle\TextNode\ScopeId($id); }
    private function peg_f11($name) { return new \Seufert\Hamle\TextNode\ScopeName($name); }
    private function peg_f12($query, $chain) { return (new \Seufert\Hamle\TextNode\Query($query))->withImmStack($chain); }
    private function peg_f13($scope, $chain) { return $scope->withImmStack($chain); }
    private function peg_f14($chain) { return (new \Seufert\Hamle\TextNode\ScopeId(null))->withImmStack($chain); }
    private function peg_f15($query) { return new \Seufert\Hamle\TextNode\Query($query); }
    private function peg_f16($id, $query) { return array_merge([['q'=>'type', 'id'=> $id]], $query); }
    private function peg_f17($query) { return array_merge([['q'=>'type', 'id'=> '*']], $query); }
    private function peg_f18($rel, $sub) { return \Seufert\Hamle\TextNode\RelQuery::for($rel, $sub); }
    private function peg_f19($id) { return ['q'=>'id', 'id'=> $id]; }
    private function peg_f20($id) { return ['q'=>'type', 'id'=> $id]; }
    private function peg_f21($id) { return ['q'=>'tag', 'id'=> $id]; }
    private function peg_f22($id) { return ['q'=>'sort', 'id'=> $id]; }
    private function peg_f23($id) { return ['q'=>'group', 'id'=> $id]; }
    private function peg_f24($offset, $limit) { return ['q'=>'range', 'limit'=> $limit, 'offset' => $offset]; }
    private function peg_f25($limit) { return ['q'=>'range', 'limit'=> $limit, 'offset' => 0]; }
    private function peg_f26($name, $param) { return new \Seufert\Hamle\TextNode\ModelParam($name, $param); }
    private function peg_f27($f, $chain) { return $f->withChain($chain); }
    private function peg_f28($f) { return $f; }
    private function peg_f29($func, $args) { return new \Seufert\Hamle\TextNode\FilterFunc($func, null, $args); }
    private function peg_f30($func) { return new \Seufert\Hamle\TextNode\FilterFunc($func); }
    private function peg_f31($arg) { return $arg; }
    private function peg_f32($s, $n, $d) { return \Seufert\Hamle\TextNode\FloatLit((float)"$s$n.$d"); }
    private function peg_f33($parts) { return $parts[1]; }
    private function peg_f34($s, $e, $post) {
                return \Seufert\Hamle\TextNode\StringConcat::fromParser($s, $e, $post);
            }
    private function peg_f35($s) { return new \Seufert\Hamle\TextNode\StringLit(join('',$s)); }
    private function peg_f36($parts) { return new \Seufert\Hamle\TextNode\StringLit($parts[1]); }
    private function peg_f37($chars) { return join('', $chars); }
    private function peg_f38($c) { return $c; }
    private function peg_f39($s) { return $s; }
    private function peg_f40($char) { return $char; }
    private function peg_f41($sequence) { return $sequence; }
    private function peg_f42($n) { return (int)join('', $n); }
    private function peg_f43($sign, $n) { return new \Seufert\Hamle\TextNode\IntLit((int)($sign.join('', $n))); }
    private function peg_f44($p, $ex) { return $p.join('',$ex); }
    private function peg_f45($p, $s) { return $p.join('', $s); }
    private function peg_f46($s) { return join('', $s); }
    private function peg_f47($name) { return join('',$name); }
    private function peg_f48($char_) { return str_replace(['n', 'r', 't'], ['\\n','\\r','\\t'], $char_); }

    private function peg_parseHtmlInput() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_parseHtmlChars();
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseAnyExpr();
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseHtmlInput();
          if ($s4 !== $this->peg_FAILED) {
            $s2 = array($s2, $s3, $s4);
            $s1 = $s2;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f0($s1);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseHtmlChars();
      }

      return $s0;
    }

    private function peg_parseCodeInput() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_parseCodeChars();
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseComplexExpr();
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseCodeInput();
          if ($s4 !== $this->peg_FAILED) {
            $s2 = array($s2, $s3, $s4);
            $s1 = $s2;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f1($s1);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseCodeChars();
      }

      return $s0;
    }

    private function peg_parseControlInput() {

      $s0 = $this->peg_parseComplexExpr();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseExprBody();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseStringLiteral();
        }
      }

      return $s0;
    }

    private function peg_parseAnyExpr() {

      $s0 = $this->peg_parseComplexExpr();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSimpleVar();
      }

      return $s0;
    }

    private function peg_parseHtmlChars() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseHtmlChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseHtmlChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f2($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseCodeChars() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseCodeChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseCodeChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f2($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseComplexExpr() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseExprBody();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c2) {
            $s3 = $this->peg_c2;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c3);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f3($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseSimpleVar() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
        $s1 = $this->peg_c4;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c5);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseIdentifier();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f4($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseExprBody() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseVarExprPart();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseVarParamFilter();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseVarParamFilter();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f5($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseGetVarExpr();
      }

      return $s0;
    }

    private function peg_parseGetVarExpr() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseVarExprPart();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseExprParamArrow();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseVarExprSub();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseVarExprPart();
      }

      return $s0;
    }

    private function peg_parseVarParamFilter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExprParamArrow();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseVarExprSubName();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f6($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c6) {
          $s1 = $this->peg_c6;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c7);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parsefilter();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f7($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseVarExprSubName() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f8($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseVarExprPart() {

      $s0 = $this->peg_parseVarScopeId();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseVarScopeName();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s1 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c8) {
              $s2 = $this->peg_c8;
              $this->peg_currPos++;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c9);
              }
            }
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parseQueryFilter();
              if ($s3 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c10) {
                  $s4 = $this->peg_c10;
                  $this->peg_currPos++;
                } else {
                  $s4 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c11);
                  }
                }
                if ($s4 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f9($s3);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseSimpleVar();
          }
        }
      }

      return $s0;
    }

    private function peg_parseVarScopeId() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
        $s1 = $this->peg_c4;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c5);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c12) {
          $s2 = $this->peg_c12;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c13);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSignedInteger();
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c14) {
              $s4 = $this->peg_c14;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c15);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f10($s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseVarScopeName() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
        $s1 = $this->peg_c4;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c5);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c12) {
          $s2 = $this->peg_c12;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c13);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIdentifier();
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c14) {
              $s4 = $this->peg_c14;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c15);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f11($s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseQueryFilter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseQueryFilterStage();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseQueryRelation();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseQueryRelation();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f12($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseVarScopeId();
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_parseVarScopeName();
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = array();
          $s3 = $this->peg_parseQueryRelation();
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseQueryRelation();
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f13($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = array();
          $s2 = $this->peg_parseQueryRelation();
          if ($s2 !== $this->peg_FAILED) {
            while ($s2 !== $this->peg_FAILED) {
              $s1[] = $s2;
              $s2 = $this->peg_parseQueryRelation();
            }
          } else {
            $s1 = $this->peg_FAILED;
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f14($s1);
          }
          $s0 = $s1;
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseQueryFilterStage();
            if ($s1 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f15($s1);
            }
            $s0 = $s1;
          }
        }
      }

      return $s0;
    }

    private function peg_parseQueryFilterStage() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifierDash();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseQueryFilterModifier();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseQueryFilterModifier();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f16($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c16) {
          $s1 = $this->peg_c16;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c17);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = array();
          $s3 = $this->peg_parseQueryFilterModifier();
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseQueryFilterModifier();
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f17($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = array();
          $s2 = $this->peg_parseQueryFilterModifier();
          if ($s2 !== $this->peg_FAILED) {
            while ($s2 !== $this->peg_FAILED) {
              $s1[] = $s2;
              $s2 = $this->peg_parseQueryFilterModifier();
            }
          } else {
            $s1 = $this->peg_FAILED;
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f17($s1);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseQueryRelation() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
        $s2 = $this->peg_c18;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c19);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
            $s2 = $this->peg_c18;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c20, $this->input_substr($this->peg_currPos, 1))) {
          $s2 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c21);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
            $s4 = $this->peg_c18;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            while ($s4 !== $this->peg_FAILED) {
              $s3[] = $s4;
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
                $s4 = $this->peg_c18;
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c19);
                }
              }
            }
          } else {
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseQueryRelationStage();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f18($s2, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseQueryRelationStage() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseAlphaNum();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseChildQueryFilterModifier();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseChildQueryFilterModifier();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f16($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c16) {
          $s1 = $this->peg_c16;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c17);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = array();
          $s3 = $this->peg_parseChildQueryFilterModifier();
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseChildQueryFilterModifier();
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f17($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = array();
          $s2 = $this->peg_parseChildQueryFilterModifier();
          if ($s2 !== $this->peg_FAILED) {
            while ($s2 !== $this->peg_FAILED) {
              $s1[] = $s2;
              $s2 = $this->peg_parseChildQueryFilterModifier();
            }
          } else {
            $s1 = $this->peg_FAILED;
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f17($s1);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseQueryFilterModifier() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c22) {
        $s1 = $this->peg_c22;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c23);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseAlphaNum();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f19($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseChildQueryFilterModifier();
      }

      return $s0;
    }

    private function peg_parseChildQueryFilterModifier() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c24) {
        $s1 = $this->peg_c24;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c25);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseAlphaNum();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f20($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c26) {
          $s1 = $this->peg_c26;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c27);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseTagIdentifier();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f21($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c28) {
            $s1 = $this->peg_c28;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c29);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseIdentifierDash();
            if ($s2 === $this->peg_FAILED) {
              $s2 = null;
            }
            if ($s2 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f22($s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c30) {
              $s1 = $this->peg_c30;
              $this->peg_currPos++;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c31);
              }
            }
            if ($s1 !== $this->peg_FAILED) {
              $s2 = $this->peg_parseInteger();
              if ($s2 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f23($s2);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c32) {
                $s1 = $this->peg_c32;
                $this->peg_currPos++;
              } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c33);
                }
              }
              if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parseInteger();
                if ($s2 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
                    $s3 = $this->peg_c34;
                    $this->peg_currPos++;
                  } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c35);
                    }
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parseInteger();
                    if ($s4 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f24($s2, $s4);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c32) {
                  $s1 = $this->peg_c32;
                  $this->peg_currPos++;
                } else {
                  $s1 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c33);
                  }
                }
                if ($s1 !== $this->peg_FAILED) {
                  $s2 = $this->peg_parseInteger();
                  if ($s2 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f25($s2);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseVarExprSub() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseExprParamArrow();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseVarExprSub();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f26($s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseIdentifier();
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f8($s1);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseExprParamArrow() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
        $s1 = $this->peg_c34;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c35);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c36) {
          $s2 = $this->peg_c36;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c37);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
          $s1 = $this->peg_c34;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c35);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c38) {
            $s2 = $this->peg_c38;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c39);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parsefilterexpr() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c6) {
        $s1 = $this->peg_c6;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c7);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsefilter();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parsefilterexpr();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f27($s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c6) {
          $s1 = $this->peg_c6;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c7);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parsefilter();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f28($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parsefilter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c8) {
          $s2 = $this->peg_c8;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c9);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_parsearglist();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parsearglist();
          }
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c10) {
              $s4 = $this->peg_c10;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c11);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f29($s1, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseIdentifier();
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f30($s1);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parsearglist() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseargument();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
          $s3 = $this->peg_c18;
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c19);
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
            $s3 = $this->peg_c18;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c24) {
            $s3 = $this->peg_c24;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c25);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
              $s5 = $this->peg_c18;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c19);
              }
            }
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
                $s5 = $this->peg_c18;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c19);
                }
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f31($s1);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseargument();
      }

      return $s0;
    }

    private function peg_parseargument() {

      $s0 = $this->peg_parseSignedFloat();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSignedInteger();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseSimpleVar();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseComplexExpr();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseStringLiteralExpr();
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseSignedFloat() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
        $s1 = $this->peg_c34;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c35);
        }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c41);
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
              $s3 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c41);
              }
            }
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c26) {
            $s3 = $this->peg_c26;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c27);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
              $s5 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c41);
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
                  $s5 = $this->input_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c41);
                  }
                }
              }
            } else {
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f32($s1, $s2, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseStringLiteralExpr() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c42) {
        $s2 = $this->peg_c42;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c43);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseDoubleStringExpr();
        if ($s3 === $this->peg_FAILED) {
          $s3 = null;
        }
        if ($s3 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c42) {
            $s4 = $this->peg_c42;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c43);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s2 = array($s2, $s3, $s4);
            $s1 = $s2;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c44) {
          $s2 = $this->peg_c44;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c45);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSingleStringExpr();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c44) {
              $s4 = $this->peg_c44;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c45);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s2 = array($s2, $s3, $s4);
              $s1 = $s2;
            } else {
              $this->peg_currPos = $s1;
              $s1 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f33($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseDoubleStringExpr() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseDoubleStringExprChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseDoubleStringExprChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseComplexExpr();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseDoubleStringExpr();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f34($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = array();
        $s2 = $this->peg_parseDoubleStringExprChar();
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parseDoubleStringExprChar();
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f35($s1);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseSingleStringExpr() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseSingleStringExprChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseSingleStringExprChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseComplexExpr();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSingleStringExpr();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f34($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = array();
        $s2 = $this->peg_parseSingleStringExprChar();
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parseSingleStringExprChar();
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f35($s1);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseStringLiteral() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c42) {
        $s2 = $this->peg_c42;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c43);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseDoubleStringCharacters();
        if ($s3 === $this->peg_FAILED) {
          $s3 = null;
        }
        if ($s3 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c42) {
            $s4 = $this->peg_c42;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c43);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s2 = array($s2, $s3, $s4);
            $s1 = $s2;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c44) {
          $s2 = $this->peg_c44;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c45);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSingleStringCharacters();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c44) {
              $s4 = $this->peg_c44;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c45);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s2 = array($s2, $s3, $s4);
              $s1 = $s2;
            } else {
              $this->peg_currPos = $s1;
              $s1 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f36($s1);
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c46);
        }
      }

      return $s0;
    }

    private function peg_parseDoubleStringCharacters() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseDoubleStringCharacter();
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parseDoubleStringCharacter();
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f37($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseSingleStringCharacters() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseSingleStringCharacter();
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parseSingleStringCharacter();
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f37($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseDoubleStringCharacter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c42) {
        $s2 = $this->peg_c42;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c43);
        }
      }
      if ($s2 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
          $s2 = $this->peg_c47;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c48);
          }
        }
      }
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = null;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSourceCharacter();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f38($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
          $s1 = $this->peg_c47;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c48);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseCharacterEscapeSequence();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f39($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseDoubleStringExprChar() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c42) {
        $s2 = $this->peg_c42;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c43);
        }
      }
      if ($s2 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
          $s2 = $this->peg_c47;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c48);
          }
        }
        if ($s2 === $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
            $s2 = $this->peg_c0;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c1);
            }
          }
        }
      }
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = null;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSourceCharacter();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f38($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s3 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          $this->peg_silentFails--;
          if ($s3 === $this->peg_FAILED) {
            $s2 = null;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f38($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
            $s1 = $this->peg_c47;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c48);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseCharacterEscapeSequence();
            if ($s2 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f39($s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        }
      }

      return $s0;
    }

    private function peg_parseSingleStringExprChar() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c44) {
        $s2 = $this->peg_c44;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c45);
        }
      }
      if ($s2 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
          $s2 = $this->peg_c47;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c48);
          }
        }
        if ($s2 === $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
            $s2 = $this->peg_c0;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c1);
            }
          }
        }
      }
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = null;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSourceCharacter();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f38($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s3 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          $this->peg_silentFails--;
          if ($s3 === $this->peg_FAILED) {
            $s2 = null;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f38($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
            $s1 = $this->peg_c47;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c48);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseCharacterEscapeSequence();
            if ($s2 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f39($s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        }
      }

      return $s0;
    }

    private function peg_parseSingleStringCharacter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c44) {
        $s2 = $this->peg_c44;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c45);
        }
      }
      if ($s2 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
          $s2 = $this->peg_c47;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c48);
          }
        }
      }
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = null;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSourceCharacter();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f40($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
          $s1 = $this->peg_c47;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c48);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseCharacterEscapeSequence();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f41($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseSourceCharacter() {

      if ($this->input_length > $this->peg_currPos) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c49);
        }
      }

      return $s0;
    }

    private function peg_parseCharacterEscapeSequence() {

      $s0 = $this->peg_parseSingleEscapeCharacter();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseNonEscapeCharacter();
      }

      return $s0;
    }

    private function peg_parseInteger() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c41);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c41);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f42($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseSignedInteger() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
        $s1 = $this->peg_c34;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c35);
        }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c41);
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
              $s3 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c41);
              }
            }
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f43($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseNonEscapeCharacter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s2 = $this->peg_parseSingleEscapeCharacter();
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = null;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_parseLineTerminator();
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSourceCharacter();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f40($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIdentifier() {

      $s0 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c50, $this->input_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c51);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c52, $this->input_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c53);
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c52, $this->input_substr($this->peg_currPos, 1))) {
            $s3 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c53);
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f44($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIdentifierDash() {

      $s0 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c54, $this->input_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c55);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c56, $this->input_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c57);
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            if (peg_regex_test($this->peg_c56, $this->input_substr($this->peg_currPos, 1))) {
              $s3 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c57);
              }
            }
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f45($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseAlphaNum() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c56, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c57);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c56, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c57);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f46($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseTagIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c56, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c57);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c56, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c57);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f47($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseHtmlChar() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
        $s1 = $this->peg_c47;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c48);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
          $s2 = $this->peg_c4;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c5);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f38($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s3 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          $this->peg_silentFails--;
          if ($s3 === $this->peg_FAILED) {
            $s2 = null;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f38($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c58, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c59);
            }
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
              $s1 = $this->peg_c4;
              $this->peg_currPos++;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c5);
              }
            }
            if ($s1 !== $this->peg_FAILED) {
              $s2 = $this->peg_currPos;
              $this->peg_silentFails++;
              if (peg_regex_test($this->peg_c60, $this->input_substr($this->peg_currPos, 1))) {
                $s3 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c61);
                }
              }
              $this->peg_silentFails--;
              if ($s3 === $this->peg_FAILED) {
                $s2 = null;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
              if ($s2 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f38($s1);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseDoubleStringChar() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
        $s1 = $this->peg_c47;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c48);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
          $s2 = $this->peg_c4;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c5);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f38($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s3 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          $this->peg_silentFails--;
          if ($s3 === $this->peg_FAILED) {
            $s2 = null;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f38($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (peg_regex_test($this->peg_c62, $this->input_substr($this->peg_currPos, 1))) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c63);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f38($s1);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseCodeChar() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c47) {
        $s1 = $this->peg_c47;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c48);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
          $s2 = $this->peg_c4;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c5);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f38($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s3 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          $this->peg_silentFails--;
          if ($s3 === $this->peg_FAILED) {
            $s2 = null;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f38($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (peg_regex_test($this->peg_c62, $this->input_substr($this->peg_currPos, 1))) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c63);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f38($s1);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseLineTerminator() {

      if (peg_regex_test($this->peg_c64, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c65);
        }
      }

      return $s0;
    }

    private function peg_parseSingleEscapeCharacter() {

      $s0 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c66, $this->input_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c67);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f48($s1);
      }
      $s0 = $s1;

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = "{";
    $this->peg_c1 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c2 = "}";
    $this->peg_c3 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c4 = "$";
    $this->peg_c5 = array( "type" => "literal", "value" => "$", "description" => "\"$\"" );
    $this->peg_c6 = "|";
    $this->peg_c7 = array( "type" => "literal", "value" => "|", "description" => "\"|\"" );
    $this->peg_c8 = "(";
    $this->peg_c9 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c10 = ")";
    $this->peg_c11 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c12 = "[";
    $this->peg_c13 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c14 = "]";
    $this->peg_c15 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c16 = "*";
    $this->peg_c17 = array( "type" => "literal", "value" => "*", "description" => "\"*\"" );
    $this->peg_c18 = " ";
    $this->peg_c19 = array( "type" => "literal", "value" => " ", "description" => "\" \"" );
    $this->peg_c20 = "/^[><]/";
    $this->peg_c21 = array( "type" => "class", "value" => "[><]", "description" => "[><]" );
    $this->peg_c22 = "#";
    $this->peg_c23 = array( "type" => "literal", "value" => "#", "description" => "\"#\"" );
    $this->peg_c24 = ",";
    $this->peg_c25 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c26 = ".";
    $this->peg_c27 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c28 = "^";
    $this->peg_c29 = array( "type" => "literal", "value" => "^", "description" => "\"^\"" );
    $this->peg_c30 = "@";
    $this->peg_c31 = array( "type" => "literal", "value" => "@", "description" => "\"@\"" );
    $this->peg_c32 = ":";
    $this->peg_c33 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c34 = "-";
    $this->peg_c35 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c36 = ">";
    $this->peg_c37 = array( "type" => "literal", "value" => ">", "description" => "\">\"" );
    $this->peg_c38 = "!";
    $this->peg_c39 = array( "type" => "literal", "value" => "!", "description" => "\"!\"" );
    $this->peg_c40 = "/^[0-9]/";
    $this->peg_c41 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c42 = "\"";
    $this->peg_c43 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c44 = "'";
    $this->peg_c45 = array( "type" => "literal", "value" => "'", "description" => "\"'\"" );
    $this->peg_c46 = array("type" => "other", "description" => "string" );
    $this->peg_c47 = "\\";
    $this->peg_c48 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c49 = array("type" => "any", "description" => "any character" );
    $this->peg_c50 = "/^[a-zA-Z_]/";
    $this->peg_c51 = array( "type" => "class", "value" => "[a-zA-Z_]", "description" => "[a-zA-Z_]" );
    $this->peg_c52 = "/^[a-zA-Z0-9_]/";
    $this->peg_c53 = array( "type" => "class", "value" => "[a-zA-Z0-9_]", "description" => "[a-zA-Z0-9_]" );
    $this->peg_c54 = "/^[a-zA-Z_-]/";
    $this->peg_c55 = array( "type" => "class", "value" => "[a-zA-Z_-]", "description" => "[a-zA-Z_-]" );
    $this->peg_c56 = "/^[0-9a-zA-Z_-]/";
    $this->peg_c57 = array( "type" => "class", "value" => "[0-9a-zA-Z_-]", "description" => "[0-9a-zA-Z_-]" );
    $this->peg_c58 = "/^[^{\\\$]/";
    $this->peg_c59 = array( "type" => "class", "value" => "[{\$]", "description" => "[{\$]" );
    $this->peg_c60 = "/^[a-z]/";
    $this->peg_c61 = array( "type" => "class", "value" => "[a-z]", "description" => "[a-z]" );
    $this->peg_c62 = "/^[^{]/";
    $this->peg_c63 = array( "type" => "class", "value" => "[{]", "description" => "[{]" );
    $this->peg_c64 = "/^[\\n\\r\\x{2028}\\x{2029}]/";
    $this->peg_c65 = array( "type" => "class", "value" => "[\n\r\x{2028}\x{2029}]", "description" => "[\n\r\x{2028}\x{2029}]" );
    $this->peg_c66 = "/^['\"\\\\bfnrtv]/";
    $this->peg_c67 = array( "type" => "class", "value" => "['\"\\bfnrtv]", "description" => "['\"\\bfnrtv]" );

    $peg_startRuleFunctions = array( 'HtmlInput' => array($this, "peg_parseHtmlInput"), 'CodeInput' => array($this, "peg_parseCodeInput"), 'ControlInput' => array($this, "peg_parseControlInput") );
    $peg_startRuleFunction  = array($this, "peg_parseHtmlInput");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};