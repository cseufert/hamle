start = object

object = i:(TextChars ComplexExpr object) {
                        /** <?php return $i; return array_filter(array_merge([$i[0],$i[1]],$i[2]), fn($v) => !is_array($v) || $v['type'] !== 'text' || $v['body'] !== ''); ?> **/
                         return [i[0],i[1]].concat(i[2]).filter(v => v.type !== 'text' || v.body !== ''); }
       / TextChars
TextChars = text: TextChar* { /** <?php return ['type' => 'string', 'body' => join('',$text)]; ?> **/
                              return {type:'string', body: text.join('')}; }


ComplexExpr = "{" body:ExprBody "}" { /** <?php return ['type' => 'expr', 'body' => $body]; ?> **/
                                       return {type:'expr', body};}
           / SimpleVar

SimpleVar = "$" name:Identifier { /** <?php return ['type' => 'scopeThis', 'name' => $name]; ?> **/
                                   return {type:'scopeThis', name};}

ExprBody = expr:GetVarExpr filter:filterexpr { /** <?php return array_merge($expr, ['filter' => $filter]); ?> **/
                                               return {...expr, filter};}
           / GetVarExpr

GetVarExpr = expr:VarExprPart ExprParamArrow param:VarExprSub { /** <?php return array_merge($expr, ['param'=> $param]); ?> **/
                                                                return { ...expr, param};}
        / VarExprPart

VarExprPart = "$" "[" id:SignedInteger "]" { /** <?php return ['type'=>'scopeId', 'id'=> (int) $id]; ?> **/
                                             return {type:"scopeId", id: parseInt(id, 10)};}
        / "$" "[" name: Identifier "]" { /** <?php return ['type'=>'scopeName', 'name'=>  $name]; ?> **/
                                         return {type:"scopeName", name}; }
        / "$" "(" query: QueryFilter ")" { /** <?php return array_merge(['type'=>'query'], $query); ?> **/
                                           return {type:"query", ...query};}
        / "$" name: Identifier { /** <?php return ['type'=>'scopeThis', "name"=>$name]; ?> **/
                                 return {type:'scopeThis', name};}

QueryFilter = query:QueryFilterStage " " rel:[><] " " sub:QueryFilterStage { /** <?php return ['query'=>$query, 'sub'=> $sub, 'rel' => $rel === '>' ? 'child':'parent']; ?> **/
                                                                            return {query, sub, rel:rel === '>'?'child':'parent'}}
            / " " rel:[><] " " sub:QueryFilterStage { /** <?php return ['query'=>null, 'sub'=> $sub, 'rel' => $rel === '>' ? 'child':'parent']; ?> **/
                                                      return {query:null, sub, rel:rel === '>'?'child':'parent'}}
            / query: QueryFilterStage { /** <?php return ['query'=>$query]; ?> **/
                                        return {query}}

QueryFilterStage = id: IdentifierDash query: QueryFilterModifier* { /** <?php return array_merge([['q'=>'type', 'id'=> $id]], $query); ?> **/
                                                                    return [{q:'type', id}, ...query];}
                   / "*" query: QueryFilterModifier* { /** <?php return array_merge([['q'=>'type', 'id'=> '*']], $query); ?> **/
                                                       return [{q:'type', id:'*'}, ...query];}
                   / query:QueryFilterModifier+ { /** <?php return array_merge([['q'=>'type', 'id'=> '*']], $query); ?> **/
                                                  return [{q:'type', id:'*'}, ...query];}

QueryFilterModifier = "," id:IdentifierDash { /** <?php return ['q'=>'type', 'id'=> $id]; ?> **/
                                              return {q:'type', id};}
                    / "." id:TagIdentifier { /** <?php return ['q'=>'tag', 'id'=> $id]; ?> **/
                                             return {q:'tag', id};}
                    / "#" id:IdentifierDash { /** <?php return ['q'=>'id', 'id'=> $id]; ?> **/
                                              return {q:'id', id};}
                    / "@" id:Integer { /** <?php return ['q'=>'group', 'id'=> $id]; ?> **/
                                       return {q:'group', id};}
                    / ":" limit:Integer "-" offset:Integer { /** <?php return ['q'=>'range', 'limit'=> $limit, 'offset' => $offset]; ?> **/
                                                             return {q:'range', limit, offset};}
                    / ":" limit:Integer { /** <?php return ['q'=>'range', 'limit'=> $limit, 'offset' => 0]; ?> **/
                                          return {q:'range', limit, offset:0};}

VarExprSub = name: Identifier ExprParamArrow param:VarExprSub { /** <?php return ['type'=>'param', 'name'=>$name,'param'=> $param]; ?> **/
                                                                return {type:"param", name, param};}
           / name: Identifier {
                                /** <?php return ['type'=>'sub', 'name'=> $name]; ?> **/
                                return {type:"sub", name};
                              }

ExprParamArrow = "-" ">" / "-" "!"

filterexpr = "|" f:filter chain:filterexpr { /** <?php return array_merge($f, ['chain' => $chain]); ?> **/
                                             return {...f, chain};}
         / "|" f: filter { /** <?php return $f; ?> **/
                           return f;}
filter = func:Identifier "(" args:arglist* ")" { /** <?php return ['type'=>'filter', 'func' => $func, 'args'=> $args]; ?> **/
                                                 return {type:'filter', func, args};}
       / func: Identifier { /** <?php return ['type'=>'filter', 'func'=>$func, 'args'=> []]; ?> **/
                            return {type:'filter', func, args:[]};}
arglist = arg: argument " "* "," " "* { /** <?php return $arg; ?> **/ return arg;}
        / argument
argument = SignedFloat / SignedInteger / SimpleVar / ComplexExpr / StringLiteral

SignedFloat = s:"-"? n:[0-9]+ "." d:[0-9]+ { /** <?php return (float)"$s$n.$d"; ?> **/
                                             return parseFloat((s||'')+n.join("")+"."+d.join(""))}

StringLiteral "string"
  = parts:('"' DoubleStringCharacters? '"' / "'" SingleStringCharacters? "'") {
      /** <?php return $parts[1]; ?> **/
      return parts[1];
    }

DoubleStringCharacters
  = chars:DoubleStringCharacter+ {
    /** <?php return join('', $chars); ?> **/
    return chars.join("");
  }

SingleStringCharacters
  = chars:SingleStringCharacter+ {
  	/** <?php return join('', $chars); ?> **/
  	return chars.join("");
  }

DoubleStringCharacter
  = !('"' / "\\") char_:SourceCharacter {
  	/** <?php return $char_; ?> **/
  	return char_;
  }
  / "\\" sequence:CharacterEscapeSequence {
	/** <?php return $sequence; ?> **/
  	return sequence;
  }

SingleStringCharacter
  = !("'" / "\\") char:SourceCharacter { /** <?php return $char; ?> **/ return char;     }
  / "\\" sequence:CharacterEscapeSequence { /** <?php return $sequence; ?> **/ return sequence;  }

SourceCharacter = .

CharacterEscapeSequence = SingleEscapeCharacter / NonEscapeCharacter

EscapeCharacter = SingleEscapeCharacter

Integer = n:[0-9]+ { /** <?php return (int)join('', $n); ?> **/ return parseInt(n.join(''), 10);}

SignedInteger = sign:"-"? n:[0-9]+ {
    /** <?php return (int)($sign.join('', $n)); ?> **/
    return parseInt((sign || '')+n.join(''), 10);
  }

NonEscapeCharacter
  = (!EscapeCharacter / LineTerminator) char:SourceCharacter { /** <?php return $char; ?> **/ return char; }

Identifier = name:[a-zA-Z_]+ { /** <?php return join('',$name); ?> **/ return name.join('')}
IdentifierDash = p:[a-zA-Z_] s:[0-9a-zA-Z_-]+ { /** <?php return $p.join('', $s); ?> **/ return [p].concat(s).join('')}
TagIdentifier = name:[0-9a-zA-Z_-]+ { /** <?php return join('',$name); ?> **/ return name.join('');}

// Character in Text
TextChar = "\\" c: "$" { /** <?php return $c; ?> **/ return c;}
     / c:"{" c2:!"$" { /** <?php return $c; ?> **/ return c;}
     / [^{$]
     / c: "$" ![a-z] { /** <?php return $c; ?> **/ return c;}

LineTerminator
  = [\n\r\u2028\u2029]

SingleEscapeCharacter
  = char_:['"\\bfnrtv] {
  	/** <?php return str_replace(['n', 'r', 't'], ['\\n','\\r','\\t'], $char_); ?> **/
  	return char_.replace(/n/,'\\n',).replace(/r/,'\\r').replace(/t/,'\\t');
  }
